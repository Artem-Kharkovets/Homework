# ДЗ 18. Судоку
# Дана матрица Судоку заданная в виде одномерного списка m с 81 элементами.
#
# m = [1,7,9,3,2,8,5,6,4,
#
# 4,3,8,6,5,9,1,7,2,
#
# 2,5,6,7,1,4,3,8,9,
#
# 3,2,4,8,9,1,7,5,6,
#
# 7,9,5,4,3,6,2,1,8,
#
# 8,6,1,2,7,5,9,4,3,
#
# 5,8,2,1,4,3,6,9,7,
#
# 9,4,7,5,6,2,8,3,1,
#
# 6,1,3,9,8,7,4,2,5]
#
#
# Реализовать следующие функции:
# def get_row(n) – где n номер строки, функция возвращает известную строку из 9 элементов в виде списка.
# def get_column(n) – где n номер колонки, функция возвращает известную колонку из 9 элементов в виде списка.
# def get_squares() – функция возвращает 9 квадратов матрицы в виде списка, который включает в себя 9 одномерных списков.
#
# Результат:
# Вывести на экран первую и последнюю строчку из 9 элементов в виде одномерного списка. 1 --> [1, 7, 9, 3, 2, 8, 5, 6, 4]; 9 --> [6, 1, 3, 9, 8, 7, 4, 2, 5]
# Вывести на экран первый и последний столбец из 9 элементов в виде одномерного списка. 1--> [1, 4, 2, 3, 7, 8, 5, 9, 6]; 9 --> [4, 2, 9, 6, 8, 3, 7, 1, 5]
# Вывести на экран первый и последний квадрат из 9 элементов в виде одномерного списка. 1 --> [1, 7, 9, 4, 3, 8, 2, 5, 6]; 9 --> [6, 9, 7, 8, 3, 1, 4, 2, 5]
#
# Подсказка: вам понадобятся срезы с шагом. Учитывайте, что матрица и строки кратны 9.

# s1 = Судоку
#
# s2 = Дана матрица Судоку заданная в виде одномерного списка m с 81 элементами.
# s3 = 1. Вывести на экран первую и последнюю строчку из 9 элементов в виде
#     одномерного списка.
#     2. Вывести на экран первый и последний столбец из 9 элементов в виде
#     одномерного списка.
#     3. Вывести на экран первый и последний квадрат из 9 элементов в виде
#     одномерного списка.
# s5 = Первая и последняя строка
# s6 = Первый и последний столбец
# s7 = Первый и последний квадрат

s1 = "\nSudoku"
s2 = """
Given a Sudoku matrix in the form of a one-dimensional list 'm' of 81 elements.
    """
s3 = """
1. Display the first and last line of 9 items as a one-dimensional list.
2. Display the first and last column of 9 items as a one-dimensional list.
3. Display the first and last square of 9 elements as a one-dimensional list.
    """
s4 = "Result."
s5 = "First and last line:"
s6 = "First and last column:"
s7 = "First and last square:"

m = [1, 7, 9, 3, 2, 8, 5, 6, 4,
     4, 3, 8, 6, 5, 9, 1, 7, 2,
     2, 5, 6, 7, 1, 4, 3, 8, 9,
     3, 2, 4, 8, 9, 1, 7, 5, 6,
     7, 9, 5, 4, 3, 6, 2, 1, 8,
     8, 6, 1, 2, 7, 5, 9, 4, 3,
     5, 8, 2, 1, 4, 3, 6, 9, 7,
     9, 4, 7, 5, 6, 2, 8, 3, 1,
     6, 1, 3, 9, 8, 7, 4, 2, 5]

print(s1.upper())
print(s2)

l1 = []
m1 = [l1] * 9
l = []
m2 = [l] * 9
m3 = []           # [[], [], [], [], [], [], [], [], []]

a = 0  # элемент, с которого начинается отсчёт
b = 9  # количество строк
c = 9  # количество элементов в строке

for n2, v in enumerate(m2):
     if n2 < c:
          l = m[a:b]
          m2.append(l)
          a += c
          b += c
          if n == c - 1:
               for n1 in m2:
                    if not (n1 in m1):
                         m3.append(n1)  # [[1, 7, 9, ............ , 4, 2, 5]]
for i in m3:
     print(i)

print(s3)
print(s4)

def get_row():
     if n

get_row()
# def get_row():
#      for i1 in m3:
#           if i1 == 0:
#                rmin = [i1]
#           else:
#                if i1 == b:
#                     rmax = m[b]
#      print(s5, f"\n1: {rmin}\n9: {rmax}")
# get_row()



# for row
# def get_row(m3):
#      m4 = []
#      print()
